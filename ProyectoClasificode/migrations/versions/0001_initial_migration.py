"""Initial migration with all tables and indexes

Revision ID: 0001
Revises: 
Create Date: 2024-01-01 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Crear extensión pgvector
    op.execute('CREATE EXTENSION IF NOT EXISTS vector;')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    
    op.create_table('hs_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('hs_code', sa.String(length=20), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('keywords', sa.Text(), nullable=True),
    sa.Column('level', sa.SmallInteger(), nullable=False),
    sa.Column('chapter', sa.SmallInteger(), nullable=False),
    sa.Column('parent_code', sa.String(length=20), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('hs_code')
    )
    
    op.create_table('hs_notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('scope', sa.String(length=20), nullable=False),
    sa.Column('scope_code', sa.String(length=20), nullable=False),
    sa.Column('note_number', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('legal_sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('source_type', sa.String(length=20), nullable=False),
    sa.Column('ref_code', sa.String(length=100), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=True),
    sa.Column('fetched_at', sa.DateTime(), nullable=True),
    sa.Column('content_hash', sa.String(length=64), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('rgi_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('rgi', sa.String(length=10), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('cases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('product_title', sa.String(length=200), nullable=False),
    sa.Column('product_desc', sa.Text(), nullable=True),
    sa.Column('attrs_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('closed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('candidates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('case_id', sa.Integer(), nullable=False),
    sa.Column('hs_code', sa.String(length=20), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('rationale', sa.Text(), nullable=True),
    sa.Column('legal_refs_json', sa.Text(), nullable=True),
    sa.Column('rank', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('case_id', 'rank', name='uq_case_rank')
    )
    
    op.create_table('validations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('case_id', sa.Integer(), nullable=False),
    sa.Column('validator_id', sa.Integer(), nullable=False),
    sa.Column('final_hs_code', sa.String(length=20), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.ForeignKeyConstraint(['validator_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('embeddings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('owner_type', sa.String(length=20), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('model', sa.String(length=50), nullable=False),
    sa.Column('dim', sa.Integer(), nullable=False),
    sa.Column('vector', postgresql.VECTOR(), nullable=False),
    sa.Column('text_norm', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_type', 'owner_id', 'provider', 'model', name='uq_embedding_owner')
    )
    # ### end Alembic commands ###
    
    # Crear índices GIN para JSONB
    op.create_index('idx_cases_attrs_json', 'cases', ['attrs_json'], postgresql_using='gin')
    
    # Crear índices para búsquedas comunes
    op.create_index('idx_users_email', 'users', ['email'])
    op.create_index('idx_users_role', 'users', ['role'])
    op.create_index('idx_users_active', 'users', ['is_active'])
    
    op.create_index('idx_cases_status', 'cases', ['status'])
    op.create_index('idx_cases_created_by', 'cases', ['created_by'])
    op.create_index('idx_cases_created_at', 'cases', ['created_at'])
    
    op.create_index('idx_candidates_case_id', 'candidates', ['case_id'])
    op.create_index('idx_candidates_hs_code', 'candidates', ['hs_code'])
    op.create_index('idx_candidates_confidence', 'candidates', ['confidence'])
    op.create_index('idx_candidates_rank', 'candidates', ['rank'])
    
    op.create_index('idx_validations_case_id', 'validations', ['case_id'])
    op.create_index('idx_validations_validator_id', 'validations', ['validator_id'])
    
    op.create_index('idx_hs_items_hs_code', 'hs_items', ['hs_code'])
    op.create_index('idx_hs_items_chapter', 'hs_items', ['chapter'])
    op.create_index('idx_hs_items_level', 'hs_items', ['level'])
    op.create_index('idx_hs_items_parent_code', 'hs_items', ['parent_code'])
    
    op.create_index('idx_hs_notes_scope', 'hs_notes', ['scope'])
    op.create_index('idx_hs_notes_scope_code', 'hs_notes', ['scope_code'])
    
    op.create_index('idx_legal_sources_type', 'legal_sources', ['source_type'])
    op.create_index('idx_legal_sources_ref_code', 'legal_sources', ['ref_code'])
    
    op.create_index('idx_rgi_rules_rgi', 'rgi_rules', ['rgi'])
    
    # Crear índices vectoriales para embeddings
    op.execute('CREATE INDEX emb_vectors_cosine ON embeddings USING ivfflat (vector vector_cosine_ops) WITH (lists=100);')
    op.execute('CREATE INDEX emb_vectors_l2 ON embeddings USING ivfflat (vector vector_l2_ops) WITH (lists=100);')
    op.create_index('idx_embeddings_owner', 'embeddings', ['owner_type', 'owner_id'])
    op.create_index('idx_embeddings_provider_model', 'embeddings', ['provider', 'model'])


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_embeddings_provider_model', table_name='embeddings')
    op.drop_index('idx_embeddings_owner', table_name='embeddings')
    op.execute('DROP INDEX IF EXISTS emb_vectors_l2;')
    op.execute('DROP INDEX IF EXISTS emb_vectors_cosine;')
    
    op.drop_index('idx_rgi_rules_rgi', table_name='rgi_rules')
    op.drop_index('idx_legal_sources_ref_code', table_name='legal_sources')
    op.drop_index('idx_legal_sources_type', table_name='legal_sources')
    op.drop_index('idx_hs_notes_scope_code', table_name='hs_notes')
    op.drop_index('idx_hs_notes_scope', table_name='hs_notes')
    op.drop_index('idx_hs_items_parent_code', table_name='hs_items')
    op.drop_index('idx_hs_items_level', table_name='hs_items')
    op.drop_index('idx_hs_items_chapter', table_name='hs_items')
    op.drop_index('idx_hs_items_hs_code', table_name='hs_items')
    op.drop_index('idx_validations_validator_id', table_name='validations')
    op.drop_index('idx_validations_case_id', table_name='validations')
    op.drop_index('idx_candidates_rank', table_name='candidates')
    op.drop_index('idx_candidates_confidence', table_name='candidates')
    op.drop_index('idx_candidates_hs_code', table_name='candidates')
    op.drop_index('idx_candidates_case_id', table_name='candidates')
    op.drop_index('idx_cases_created_at', table_name='cases')
    op.drop_index('idx_cases_created_by', table_name='cases')
    op.drop_index('idx_cases_status', table_name='cases')
    op.drop_index('idx_users_active', table_name='users')
    op.drop_index('idx_users_role', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_cases_attrs_json', table_name='cases')
    
    op.drop_table('embeddings')
    op.drop_table('validations')
    op.drop_table('candidates')
    op.drop_table('cases')
    op.drop_table('rgi_rules')
    op.drop_table('legal_sources')
    op.drop_table('hs_notes')
    op.drop_table('hs_items')
    op.drop_table('users')
    # ### end Alembic commands ###
